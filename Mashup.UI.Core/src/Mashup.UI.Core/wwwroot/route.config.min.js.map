{"version":3,"sources":["route.config.js"],"names":["mashupApp","factory","$log","$q","$location","sessionService","utility","logRouteInstrumentation","appName","logObject","getLogObject","absUrl","url","log","logRoute","defer","resolve","promise","config","$routeProvider","otherwise","redirectTo","when","templateUrl","controller","controllerAs","loadMyCtrl","$ocLazyLoad","load","name","files","$timeout","$interval","cacheService","coreRouteHelper","resolveRoute","authGroupArray","getAppSession","then","data","isAuthenticated","isAuthorized","session","appUserSession","_","isUndefined","isNull","first","where","sessions","isUserAuthenticated","isUserAuthorized","sessionLastUsed","localMilToUtcMil","Date","getTime","path","reject","getCache","userName","utcMills","authDateTime","authTimeUTCMills","result","currentUtcMills","minutes","expireUtcMills","length","angular","isArray","forEach","value","key","contains","roles","$route"],"mappings":"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","file":"route.config.min.js","sourcesContent":["/*global mashupApp:false, _:false */\r\n\r\n// --------------------------------------------------------------------------------------------- \r\n// --------------------------------------------------------------------------------------------- \r\n// core/config/route.config.js\r\n// --------------------------------------------------------------------------------------------- \r\n// --------------------------------------------------------------------------------------------- \r\n\r\nmashupApp.factory('coreRouteHelper', ['$log', '$q', '$location', 'sessionService',\r\n     'utility', function ($log, $q, $location, sessionService,\r\n         utility) {\r\n         'use strict';\r\n\r\n         var logRouteInstrumentation = function (appName) {\r\n             // -------------------------------------------------------------------\r\n             // Instrumenting the application so we can track what pages get used.\r\n             // -------------------------------------------------------------------\r\n             var logObject = utility.getLogObject('Instr', appName, 'coreRouteHelper', 'logRoute',\r\n                 'resolving route', sessionService);\r\n             // Additional or custom properties for logging.\r\n             logObject.absUrl = $location.absUrl();\r\n             logObject.url = $location.url();\r\n             $log.log('UI-Routing to [ ' + $location.url() + ' ]', logObject);\r\n             // -------------------------------------------------------------------\r\n             // -------------------------------------------------------------------\r\n         };\r\n\r\n         var logRoute = function (appName) {\r\n\r\n             var defer = $q.defer();\r\n\r\n             (function () {\r\n                 logRouteInstrumentation(appName);\r\n                 defer.resolve(true);\r\n             })();\r\n\r\n             return defer.promise;\r\n         };\r\n\r\n         return {\r\n\r\n             logRoute: logRoute\r\n         };\r\n     }]);\n/*global mashupApp:false, _:false */\r\n\r\n// configure routes\r\nmashupApp.config(['$routeProvider', function ($routeProvider) {\r\n\r\n    $routeProvider.otherwise({ redirectTo: '/mashup' });\r\n\r\n    $routeProvider\r\n    .when('/mashup/about', {\r\n        templateUrl: 'apps/mashup/about.min.html',\r\n        controller: 'mashup.AboutController',\r\n        controllerAs: 'vm',\r\n        resolve: {\r\n            loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\r\n                // you can lazy load files for an existing module\r\n                return $ocLazyLoad.load({\r\n                    name: 'mashupApp',\r\n                    files: ['apps/mashup/about.controller.min.js']\r\n                });\r\n            }],\r\n            //resolveRoute: ['$route', 'mashupRouterAuth', function ($route, mashupRouterAuth) {\r\n            //    return mashupRouterAuth.resolveRoute(['Administrator']);\r\n            //}],\r\n        }\r\n    })\r\n\r\n    .when('/mashup', {\r\n        templateUrl: 'apps/mashup/welcome.min.html',\r\n        controller: 'mashup.WelcomeController',\r\n        controllerAs: 'vm',\r\n        resolve: {\r\n            loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\r\n                return $ocLazyLoad.load({\r\n                    name: 'mashupApp',\r\n                    files: ['apps/mashup/welcome.controller.min.js']\r\n                });\r\n            }],\r\n            //resolveRoute: ['$route', 'mashupRouterAuth', function ($route, mashupRouterAuth) {\r\n            //    return mashupRouterAuth.resolveRoute(['MashupUser']);\r\n            //}],\r\n        }\r\n    });\r\n    //.when('/mashup/login', {\r\n    //    templateUrl: 'apps/mashup/login.min.html',\r\n    //    controller: 'mashup.LoginController',\r\n    //    controllerAs: 'vm',\r\n    //    resolve: {\r\n    //        loadMyCtrl: ['$ocLazyLoad', function ($ocLazyLoad) {\r\n    //            return $ocLazyLoad.load({\r\n    //                name: 'mashupApp',\r\n    //                files: ['apps/mashup/login.controller.min.js']\r\n    //            });\r\n    //        }],\r\n    //        logRoute: ['$route', 'coreRouteHelper', function ($route, coreRouteHelper) {\r\n    //            return coreRouteHelper.logRoute('mashup');\r\n    //        }],\r\n\r\n    //    }\r\n    //});\r\n\r\n}]);\r\n\r\nmashupApp.factory('mashupRouterAuth', ['$log', '$q', '$timeout', '$location', '$interval',\r\n    'sessionService', 'cacheService', 'utility', 'coreRouteHelper',\r\n    function ($log, $q, $timeout, $location, $interval, sessionService, cacheService,\r\n        utility, coreRouteHelper) {\r\n        'use strict';\r\n\r\n        // METHOD CALLED BY THE ROUTER TO VERIFY AUTHENTICATION AND THEN AUTHORIZATION.\r\n        var resolveRoute = function (authGroupArray) {\r\n            // VERIFY USER IS AUTHENTICATED AND AUTHORIZED AND IF NOT REROUTE TO LOGIN PAGE.\r\n            var defer = $q.defer();\r\n\r\n            (function () {\r\n\r\n                getAppSession().then(function (data) {\r\n                    var appUserSession = data[0];\r\n\r\n                    var isAuthenticated;\r\n                    var isAuthorized;\r\n                    var session;\r\n\r\n                    if (_.isUndefined(appUserSession) || _.isNull(appUserSession)) {\r\n                        isAuthenticated = false;\r\n                        isAuthorized = false;\r\n                    }\r\n                    else {\r\n\r\n                        session = _.first(_.where(appUserSession.sessions, { 'appName': 'coreSession' }));\r\n\r\n                        isAuthenticated = isUserAuthenticated(session);\r\n                        isAuthorized = isUserAuthorized(session, authGroupArray);\r\n                    }\r\n\r\n                    if (!isAuthenticated) {\r\n                        // HERE YOU CAN SET $location.path('/login') to force authentication.\r\n                        $location.path('/mashup/login');\r\n\r\n                        if (!isAuthorized) {\r\n                            // Just kill the page change completely.\r\n                            defer.reject();\r\n                        }\r\n                    }\r\n                    else {\r\n                        session.sessionLastUsed = utility.localMilToUtcMil(new Date().getTime());\r\n                    }\r\n\r\n                    coreRouteHelper.logRoute('mashup');\r\n                    defer.resolve(true);\r\n\r\n                });\r\n\r\n            })();\r\n\r\n            return defer.promise;\r\n        };\r\n\r\n        var getAppSession = function () {\r\n            return cacheService.getCache('mashupSessions');\r\n        };\r\n\r\n        // CHECK AUTHENTICATION\r\n        var isUserAuthenticated = function (session) {\r\n            // REPLACE WITH YOU AUTHENTICATION CODE.\r\n            if (_.isNull(session) || _.isUndefined(session)) {\r\n                return false;\r\n            }\r\n            else {\r\n                var userId = session.userName;\r\n                var isAuthenticated = session.isAuthenticated;\r\n                var authDateTime = session.authDateTime;\r\n                var utcMills = session.authTimeUTCMills;\r\n\r\n                var result = true;\r\n\r\n                // Check if user is authenticated.\r\n                if (!isAuthenticated) { result = false; }\r\n\r\n                // Check if the session is stale\r\n                var currentUtcMills = utility.localMilToUtcMil(new Date().getTime());\r\n\r\n                var minutes = 60;  // HARD CODED SESSION EXPIRATION FOR DEMO PURPOSES.\r\n                var expireUtcMills = utcMills + (60000 * minutes);\r\n\r\n                if (expireUtcMills < currentUtcMills) { result = false; }\r\n\r\n                return result;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        // CHECK AUTHORIZATION\r\n        var isUserAuthorized = function (session, authGroupArray) {\r\n            // REPLACE WITH YOU AUTHORIZATION CODE.\r\n            var result = false;\r\n\r\n            // if no group is passed then assume isAuthorized = true;\r\n            if (authGroupArray.length === 0) { result = true; }\r\n\r\n            if (_.isNull(session) || _.isUndefined(session)) {\r\n                return false;\r\n            }\r\n            else {\r\n                // verify authGroupArray is an array.\r\n                // verify session.roles has a match with a group in authGroupArray\r\n                if (angular.isArray(authGroupArray)) {\r\n                    // JavaScript FOR loop is faster.  \r\n                    // This is more readable so for small lists I'll used angular.isArray.\r\n                    // http://stackoverflow.com/questions/13843972/angular-js-break-foreach\r\n                    angular.forEach(authGroupArray, function (value, key) {\r\n                        if (_.contains(session.roles, value)) {\r\n                            result = true;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        return {\r\n\r\n            resolveRoute: resolveRoute\r\n        };\r\n    }]);\r\n\n/*global mashupApp:false */\r\n\r\n// --------------------------------------------------------------------------------------------- \r\n// --------------------------------------------------------------------------------------------- \r\n// core/apps/quality/~appConfig/route.config.js\r\n// --------------------------------------------------------------------------------------------- \r\n// --------------------------------------------------------------------------------------------- \r\n\r\n///*jshint laxcomma: true*/\r\n\r\nmashupApp.config(['$routeProvider', function ($routeProvider) {\r\n    'use strict';\r\n\r\n    $routeProvider\r\n        .when('/quality/cqtsQualityExport', {\r\n            templateUrl: 'apps/quality/cqtsQualityExport/cqtsQualityExport.min.html',\r\n            controller: 'quality.CqtsQualityExportController',\r\n            controllerAs: 'vm',\r\n            resolve: {\r\n                loadMyCtrl: [\r\n                    '$ocLazyLoad', function ($ocLazyLoad) {\r\n                        return $ocLazyLoad.load({\r\n                            name: 'mashupApp',\r\n                            files: ['apps/quality/cqtsQualityExport/cqtsQualityExport.controller.js',\r\n                                     'apps/quality/~appServices/qualityDataService.min.js']\r\n                        });\r\n                    }\r\n                ],\r\n                logRoute: ['$route', 'coreRouteHelper', function ($route, coreRouteHelper) {\r\n                    return coreRouteHelper.logRoute();\r\n                }]\r\n            }\r\n        })\r\n        .when('/quality/cqtsTransExport', {\r\n            templateUrl: 'apps/quality/cqtsTransExport/cqtsTransExport.min.html',\r\n            controller: 'quality.CqtsTransExportController',\r\n            controllerAs: 'vm',\r\n            resolve: {\r\n                loadMyCtrl: [\r\n                    '$ocLazyLoad', function ($ocLazyLoad) {\r\n                        return $ocLazyLoad.load({\r\n                            name: 'mashupApp',\r\n                            files: ['apps/quality/cqtsTransExport/cqtsTransExport.controller.min.js',\r\n                                     'apps/quality/~appServices/qualityDataService.min.js']\r\n                        });\r\n                    }\r\n                ],\r\n                logRoute: ['$route', 'coreRouteHelper', function ($route, coreRouteHelper) {\r\n                    return coreRouteHelper.logRoute();\r\n                }]\r\n\r\n            }\r\n        });\r\n}]);"],"sourceRoot":"/source/"}