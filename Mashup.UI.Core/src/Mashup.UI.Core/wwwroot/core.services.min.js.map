{"version":3,"sources":["core.services.js"],"names":["mashupApp","service","$http","$q","$log","cacheService","getCache","cacheName","deferred","defer","then","data","resolve","promise","factory","$rootScope","alertService","alerts","add","type","msg","push","close","closeAlert","this","alert","closeAlertIdx","indexOf","index","splice","keyStr","encode","input","chr1","chr2","enc1","enc2","enc3","output","chr3","enc4","i","charCodeAt","isNaN","charAt","length","decode","base64test","exec","replace","String","fromCharCode","utility","detectService","sessionService","dbCache","ydn","db","Storage","dbCacheReady","onReady","console","log","isCacheStale","minutes","result","ageToleranceMilliseconds","envSession","batteryLevel","currentDateMilliseconds","Date","getTime","wait","executeSql","record","recordCount","durationMilliseconds","updatedDate","e","setTimeout","updateCacheAge","cacheJSON","id","put","name","keyPath","minutesInOneWeek","clear","logObject","getLogObject","putCache","schema","reason","reject","getData","options","staleMinutes","heartBeatOptions","webApiUrl","url","cacheIsStale","heartBeatName","heartBeatUrl","webApiAvailable","detect","success","err","error","indexedDB","deleteDatabase","failed","$interval","$filter","logHeartbeatLog","logHeartbeatReady","intervalTime","retainDuration","setInterval","indexLongDate","keyRange","KeyRange","upperBound","remove","done","count","status","fail","heartBeatMonitorList","heartBeatMonitorInterval","_","each","item","get","withCredentials","detected","recordHeartBeatResult","addToCodeBlueList","webApiName","datetime","info","angular","fromJson","subject","where","codeBlueList","codeBlueMonitor","startCodeBlueMonitor","codeBlueMonitorInterval","cancel","recordCodeBlueResult","filter","x","canDetectHeartBeat","newItem","warn","config","$provide","decorator","$delegate","logService","CONST_CUST_PARMS","CONST_STANDARD_LOGGING_PARM","stores","autoIncrement","logDb","logDbReady","addEventListener","event","getError","buildLogObject","args","logType","longDateTime","longDateTimeUtc","localMilToUtcMil","dateTime","dateTimeUtc","logServiceObj","logId","dateTimeLocal","transmitted","hasOwnProperty","additionalProcessing","isString","logDuration","deviceType","indexLongDateUtc","arguments","OSName","navigator","appVersion","osName","nameOffset","verOffset","ix","nAgt","userAgent","browserName","appName","fullVersion","parseFloat","majorVersion","parseInt","substring","lastIndexOf","toLowerCase","toUpperCase","isMobile","Android","match","BlackBerry","iOS","Opera","Windows","any","mobileType","battery","webkitBattery","mozBattery","batteryLevelChanged","level","userSessions","getUserSessions","logUserName","logAppName","setUserSession","session","utility_UtcDateService","utility_LogHelper","utcMilToLocalMil","localDateToUtcDate","utcDateToLocalDate","app","mod","func","module","browser","milliseconds","now","setTime","getTimezoneOffset","localDate","utcDate"],"mappings":"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","file":"core.services.min.js","sourcesContent":["/*global mashupApp:false */\r\n\r\nmashupApp.service('coreDataService', ['$http', '$q', '$log', 'cacheService', function ($http, $q, $log, cacheService) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        getCache: function (cacheName) {\r\n            var deferred = $q.defer();\r\n\r\n            cacheService.getCache(cacheName).then(function (data) {\r\n                deferred.resolve(data);\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n    };\r\n}]);\n\n\n/*\r\n* Alert Service to be shared across controllers\r\n*\r\n* http://www.lovelucy.info/angularjs-global-alert-service.html\r\n* http://jsbin.com/UxapebE/1/edit\r\n*/\r\n\r\n/*global mashupApp:false */\r\n\r\nmashupApp.factory('alertService', ['$rootScope', function ($rootScope) {\r\n    'use strict';\r\n\r\n    var alertService = {};\r\n    // global `alerts` array\r\n    $rootScope.alerts = [];\r\n    alertService.add = function (type, msg) {\r\n        $rootScope.alerts.push({ 'type': type, 'msg': msg, 'close': function () { alertService.closeAlert(this); } });\r\n    };\r\n    alertService.closeAlert = function (alert) {\r\n        alertService.closeAlertIdx($rootScope.alerts.indexOf(alert));\r\n    };\r\n    alertService.closeAlertIdx = function (index) {\r\n        $rootScope.alerts.splice(index, 1);\r\n    };\r\n    return alertService;\r\n}]);\n\r\n/*jshint strict: false, bitwise: false */\r\n/*global mashupApp:false */\r\n/*global alert:false*/\r\n\r\n// Source for this service.\r\n// http://wemadeyoulook.at/en/blog/implementing-basic-http-authentication-http-requests-angular/\r\n\r\nmashupApp.factory('Base64', function () {\r\n    'use strict';\r\n\r\n    var keyStr = 'ABCDEFGHIJKLMNOP' +\r\n        'QRSTUVWXYZabcdef' +\r\n        'ghijklmnopqrstuv' +\r\n        'wxyz0123456789+/' +\r\n        '=';\r\n    return {\r\n        encode: function (input) {\r\n            var output = '';\r\n            var chr1, chr2, chr3 = '';\r\n            var enc1, enc2, enc3, enc4 = '';\r\n            var i = 0;\r\n\r\n            do {\r\n                chr1 = input.charCodeAt(i++);\r\n                chr2 = input.charCodeAt(i++);\r\n                chr3 = input.charCodeAt(i++);\r\n\r\n                enc1 = chr1 >> 2;\r\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n                enc4 = chr3 & 63;\r\n\r\n                if (isNaN(chr2)) {\r\n                    enc3 = enc4 = 64;\r\n                } else if (isNaN(chr3)) {\r\n                    enc4 = 64;\r\n                }\r\n\r\n                output = output +\r\n                    keyStr.charAt(enc1) +\r\n                    keyStr.charAt(enc2) +\r\n                    keyStr.charAt(enc3) +\r\n                    keyStr.charAt(enc4);\r\n                chr1 = chr2 = chr3 = '';\r\n                enc1 = enc2 = enc3 = enc4 = '';\r\n            } while (i < input.length);\r\n\r\n            return output;\r\n        },\r\n\r\n        decode: function (input) {\r\n            var output = '';\r\n            var chr1, chr2, chr3 = '';\r\n            var enc1, enc2, enc3, enc4 = '';\r\n            var i = 0;\r\n\r\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n            var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\r\n            \r\n            if (base64test.exec(input)) {\r\n                alert('There were invalid base64 characters in the input text.\\n' +\r\n                    'Valid base64 characters are A-Z, a-z, 0-9, \\'+\\', \\'\\/\\',and \\'=\\'\\\\n' +\r\n                    'Expect errors in decoding.');\r\n            }\r\n            \r\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\r\n\r\n            do {\r\n                enc1 = keyStr.indexOf(input.charAt(i++));\r\n                enc2 = keyStr.indexOf(input.charAt(i++));\r\n                enc3 = keyStr.indexOf(input.charAt(i++));\r\n                enc4 = keyStr.indexOf(input.charAt(i++));\r\n\r\n                chr1 = (enc1 << 2) | (enc2 >> 4);\r\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n                chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n                output = output + String.fromCharCode(chr1);\r\n\r\n                if (enc3 !== 64) {\r\n                    output = output + String.fromCharCode(chr2);\r\n                }\r\n                if (enc4 !== 64) {\r\n                    output = output + String.fromCharCode(chr3);\r\n                }\r\n\r\n                chr1 = chr2 = chr3 = '';\r\n                enc1 = enc2 = enc3 = enc4 = '';\r\n\r\n            } while (i < input.length);\r\n\r\n            return output;\r\n        }\r\n    };\r\n});\n/*global mashupApp:false */\r\n/*global indexedDB:false*/\r\n/*global ydn:false */\r\n\r\nmashupApp.service('cacheService', ['$http', '$q', '$log', 'utility', 'detectService',\r\n     'sessionService', function ($http, $q, $log, utility, detectService, sessionService) {\r\n         'use strict';\r\n\r\n         // -------------------------------------------------------------------------\r\n         // Kicks off the local caching solution\r\n         // Most caching will be performed by angular-cached-resource.\r\n         // This caching is to satisfy the use case where data is stable and does not\r\n         // need to be retrieved often.  This approach prevents many unnecessary calls\r\n         // across the network.\r\n         // indexedDB.deleteDatabase('mashCacheDB');\r\n         // \r\n         // -------------------------------------------------------------------------\r\n         // Note on schema:  You'll notice we are not passing in a schema which is \r\n         // recommended.  This is because we are using YDN-DB/IndexedDB only as a \r\n         // generic cache and because the Mashup is a composite set of applications\r\n         // we don't want to hold application specific schemas in the core. When\r\n         // using this caching model you will pass yoru schema in as part of your data\r\n         // call.  This schema is then, dynamically, added to the mashCacheDB database.\r\n         // -------------------------------------------------------------------------\r\n         var dbCache = new ydn.db.Storage('mashCacheDB');\r\n\r\n         // This only works with the debug version of YDN-DB\r\n         // ydn.debug.log('ydn.db', 'finest');\r\n\r\n         // This value 'dbCacheReady' allows the rest of the application to know when the database is ready\r\n         // to use.  Specifically, cacheService needs this.\r\n         var dbCacheReady = false;\r\n         dbCache.onReady(function () {\r\n             dbCacheReady = true;\r\n             console.log('mashCacheDB is ready.  [cacheService]');\r\n         });\r\n         // -------------------------------------------------------------------------\r\n\r\n         var isCacheStale = function (cacheName, minutes) {\r\n             // dbCache: is 'mashCacheDB'\r\n             // store: No store is provided but might be added later to remove constaint 'mashCacheAge'\r\n             // subject: is the name of the cache being evaluated.\r\n             // minutes: is the number of minutes before the cache is considered stale.\r\n\r\n             var deferred = $q.defer();\r\n             var result = true;\r\n\r\n             // get milliseconds version of minutes.\r\n             var ageToleranceMilliseconds = (minutes * 60) * 1000;\r\n\r\n             var envSession = sessionService.envSession();\r\n\r\n             // manage based on battery\r\n             if (envSession.batteryLevel && envSession.batteryLevel <= 30) {\r\n                 ageToleranceMilliseconds = ageToleranceMilliseconds * 4;\r\n             }\r\n\r\n             var currentDateMilliseconds = new Date().getTime();\r\n\r\n             // checking dbCacheReady because, if a page loads to quickly, before the cache database is ready\r\n             // then accessing it will cause an error.\r\n             (function wait() {\r\n                 if (dbCacheReady) {\r\n\r\n                     // The database is ready so go ahead and begin checking for stale data.\r\n                     try {\r\n                         dbCache.executeSql('SELECT * FROM mashCacheAge WHERE id = \\'' + cacheName + '\\'')\r\n                             .then(function (record) {\r\n                                 //$log.log('mashCacheAge record for: [ ' + cacheName + ' ] cache.');\r\n                                 //$log.log(record);\r\n\r\n                                 // if no record is returned then it is considered stale.\r\n                                 var recordCount = record.length;\r\n                                 if (recordCount > 0) {\r\n                                     var durationMilliseconds = currentDateMilliseconds - record[0].updatedDate;\r\n\r\n                                     // Check if the data is stale.\r\n                                     if (durationMilliseconds > ageToleranceMilliseconds) {\r\n                                         result = true;\r\n                                     } else { result = false; }\r\n\r\n                                     deferred.resolve(result);\r\n                                 } else {\r\n                                     // no records found so this cache is considered stale.\r\n                                     deferred.resolve(true);\r\n                                 }\r\n                             });\r\n                     }\r\n                     catch (e) {\r\n                         // no data store for the cache was found so it is considered stale.\r\n                         deferred.resolve(true);\r\n                     }\r\n\r\n                 } else {\r\n                     // Giving the cache database a moment to set up.\r\n                     setTimeout(wait, 500);\r\n                 }\r\n             })();\r\n\r\n             return deferred.promise;\r\n         };\r\n\r\n         // Updates the age of any cacheName.\r\n         var updateCacheAge = function (cacheName) {\r\n             // updates the mashCacheAge which keeps track of how old/stale a cache is.\r\n             var cacheJSON = { id: cacheName, updatedDate: new Date().getTime() };\r\n             dbCache.put({ name: 'mashCacheAge', keyPath: 'id' }, cacheJSON);\r\n         };\r\n\r\n         var getCache = function (cacheName) {\r\n             var deferred = $q.defer();\r\n             // waiting for dbCacheReady because accessing the cache to early causes an error.\r\n             (function wait() {\r\n                 if (dbCacheReady) {\r\n\r\n                     try {\r\n                         dbCache.executeSql('SELECT * FROM \\'' + cacheName + '\\'').then(function (record) {\r\n                             if (record === 'N') { deferred.resolve(''); }\r\n                             else { deferred.resolve(record); }\r\n                         });\r\n\r\n                     }\r\n                     catch (e) {\r\n                         // no data store for the cache was found so it is considered stale.\r\n                         deferred.resolve('NoCache');\r\n                     }\r\n\r\n                 } else { setTimeout(wait, 500); }\r\n             })();\r\n             return deferred.promise;\r\n         };\r\n\r\n         // --------------------------------------------------------------------------------\r\n         // If the machCache is too old then all the data is wiped out and the user starts again.\r\n         // --------------------------------------------------------------------------------\r\n         var minutesInOneWeek = 10080;  // 10080 = 1 week\r\n         isCacheStale('mashCacheStart', minutesInOneWeek).then(function (result) {\r\n             //alert(result);\r\n             if (result) {\r\n                 // The mashCache is too old and needs cleared.\r\n                 //ydn.db.deleteDatabase('mashCacheDB');\r\n                 //setTimeout(function () { alert('mashCacheDB was stale so deleted.'); }, 1);\r\n\r\n                 // TODO: Add this to mashup logging so we can keep track of this happening.\r\n                 //       Possibly make this kind of information available to the user log page.\r\n\r\n                 // The first time through there will be no objects and this clear will fail. \r\n                 try { dbCache.clear(); } catch (e) { }\r\n\r\n                 var logObject = utility.getLogObject('mashCasheDelete', 'Mashup.UI.Core', 'cacheService',\r\n                     'root of cacheService', 'Stale-Cache', sessionService);\r\n                 $log.log('mashCacheDB was stale so deleted.', logObject);\r\n                 updateCacheAge('mashCacheStart');\r\n             }\r\n         });\r\n\r\n\r\n         return {\r\n\r\n             dbCache: dbCache,\r\n\r\n             putCache: function (cacheName, schema, data) {\r\n\r\n                 //dbCache.put({ name: cacheName, keyPath: 'id' }, { id: cacheName, data: data });\r\n                 dbCache.put(schema, data);\r\n                 updateCacheAge(cacheName);\r\n\r\n             },\r\n\r\n             // Retrieve cache\r\n             getCache: function (cacheName) {\r\n                 var deferred = $q.defer();\r\n\r\n                 getCache(cacheName).then(function (data) {\r\n                     deferred.resolve(data);\r\n                 }, function (reason) {\r\n                     deferred.reject();\r\n                 });\r\n\r\n                 return deferred.promise;\r\n\r\n             },\r\n             getData: function (cacheName, schema, options, staleMinutes,\r\n                 heartBeatOptions) {\r\n\r\n                 var deferred = $q.defer();\r\n\r\n                 var webApiUrl = options.url;\r\n                 \r\n                 // Check if the cache is stale.\r\n                 isCacheStale(cacheName, staleMinutes).then(function (cacheIsStale) {\r\n                     // If cache stale then get new data.\r\n\r\n                     // if no application name is provided for the detect service to use then the url is used.\r\n                     // this is mostly used for logging purposes.\r\n                     if (!heartBeatOptions.heartBeatName) {\r\n                         heartBeatOptions.heartBeatName = heartBeatOptions.heartBeatName || webApiUrl;\r\n                     }\r\n                     else {\r\n                         heartBeatOptions.heartBeatName = heartBeatOptions.heartBeatName || heartBeatOptions.heartBeatUrl;\r\n                     }\r\n\r\n\r\n                     var webApiAvailable = detectService.detect(heartBeatOptions.heartBeatUrl, heartBeatOptions.heartBeatName);\r\n\r\n                     if (cacheIsStale && webApiAvailable) {\r\n                         // cache has become stale so retrieving fresh data.\r\n                         // -------------------\r\n                         // Example of options\r\n                         // -------------------\r\n                         //var options = {\r\n                         //    url: 'http://localhost:50004/api/ExampleData/Items/Search2/',\r\n                         //    method: 'POST',\r\n                         //    data: JSON.stringify(myData),\r\n                         //    withCredentials: true,\r\n                         //    contentType: 'application/json'\r\n                         //}\r\n                         // -------------------\r\n                         // Example of options.params\r\n                         // -------------------\r\n                         //var params = {\r\n                         //    id: vm.id,\r\n                         //    action: vm.action,\r\n                         //    completed: vm.completed,\r\n                         //    myDecimal: vm.myDecimal,\r\n                         //    myDouble: vm.myDouble,\r\n                         //    myLong: vm.myLong,\r\n                         //    contact: vm.contact,\r\n                         //    doneWithIndeterminate: vm.doneCheckedState\r\n                         //};\r\n                         $http(options)\r\n                             .success(function (data) {\r\n\r\n                                 //#region\r\n\r\n                                 // -------------------------------------------------------------------------------\r\n                                 // Schema will be passed in so that it can be generated on the fly.\r\n                                 // When a schema for an object store changes it will break and cause\r\n                                 // an error.  We will look for that error and simply delete the\r\n                                 // indexedDB database so the next time this is caused the new schema\r\n                                 // can take hold.  This doesn't seem ideal but the impact is only\r\n                                 // to performance when schemas change for cached data.\r\n                                 // -------------------------------------------------------------------------------\r\n                                 // Normally the schema is defined up front and versioned.  For the cache we want\r\n                                 // developers to have one less thing to consider and allow the mashup core\r\n                                 // to be less coupled to the caching needs of other mashup applications.\r\n                                 // -------------------------------------------------------------------------------\r\n\r\n                                 //#endregion\r\n\r\n                                 try {\r\n                                     // add data to cache\r\n                                     dbCache.put(schema, data);\r\n                                     // updateCacheAge\r\n                                     updateCacheAge(cacheName);\r\n                                 }\r\n                                 catch (err) {\r\n\r\n                                     var logObject = utility.getLogObject('mashCasheDelete', 'Mashup.UI.Core',\r\n                                         'cacheService', 'getData', 'Error', sessionService);\r\n                                     $log.error(err, logObject);\r\n                                     indexedDB.deleteDatabase('mashCacheDB');\r\n                                     $log.log('IndexedDB error on updating a cache. Deleted database',\r\n                                         logObject);\r\n\r\n                                 }\r\n\r\n                                 // return web api data to the client\r\n                                 // async alert() so the performance perception isn't affected.\r\n                                 //setTimeout(function () { alert('web api data'); }, 1);\r\n                                 deferred.resolve(data);\r\n                             })\r\n                         .error(function () {\r\n                             // if the call fails then return the current cache.\r\n                             // TODO: make an async call to let someone know a service failed?\r\n                             // alert('Web Api Error');\r\n                             detectService.failed(heartBeatOptions.heartBeatUrl, heartBeatOptions.heartBeatName);\r\n                             getCache(cacheName).then(function (data) {\r\n                                 // async alert()\r\n                                 // setTimeout(function () { alert('cache data'); }, 1);\r\n                                 deferred.resolve(data);\r\n                             });\r\n                         });\r\n                     } else {\r\n                         // cached data is still good so return it.\r\n                         getCache(cacheName).then(function (data) {\r\n                             deferred.resolve(data);\r\n                         });\r\n                     }\r\n                 });\r\n                 return deferred.promise;\r\n             }\r\n         };\r\n     }]);\r\n\n/*global mashupApp: false */\r\n/*global ydn: false*/\r\n/*global _:false */\r\n\r\nmashupApp.service('detectService', ['$http', '$q', '$log', '$interval', '$filter',\r\n    '$rootScope', 'utility', 'sessionService',\r\n    function ($http, $q, $log, $interval, $filter, $rootScope, utility, sessionService) {\r\n        'use strict';\r\n\r\n        // Manage logServiceDB.Heartbeats.\r\n        // delete all records over 1 week old.\r\n        // Manage the log size.\r\n        (function () {\r\n\r\n            var logHeartbeatLog = new ydn.db.Storage('logServiceDB');\r\n\r\n            var logHeartbeatReady = false;\r\n\r\n            logHeartbeatLog.onReady(function () {\r\n                logHeartbeatReady = true;\r\n                console.log('logServiceDB is ready. [detectService]');\r\n            });\r\n\r\n            // TODO: Consider altering the interval based on the power of the device, batter power, network speed.\r\n            var intervalTime = 10080000;// check every 2 hours\r\n            var retainDuration = 604800000; // one week is 604800000\r\n\r\n            setInterval(function () {\r\n\r\n                // wait until logDbReady is ready. IE: true\r\n                (function wait() {\r\n                    if (logHeartbeatReady) {\r\n\r\n                        // delete all records older than 1 week.\r\n                        var indexLongDate = new Date().getTime() - retainDuration;\r\n                        // TODO: figure out how to add ydn to angular modules to avoid implicit declaration.\r\n                        var keyRange = ydn.db.KeyRange.upperBound(indexLongDate, true);\r\n\r\n                        var logObject = utility.getLogObject('detectManagement:Truncate', 'Mashup.UI.Core',\r\n                            'detectService', 'anonymous:setInterval', null, sessionService);\r\n                        // Truncate all logs older than a week old.\r\n                        logHeartbeatLog.remove('heartbeat', keyRange)\r\n                            .done(function (count) {\r\n                                logObject.status = true;\r\n                                logObject.count = count;\r\n\r\n                                $log.log('Truncating old [heartbeat] records.', logObject);\r\n                                //$log.log(['Truncating old [heartbeat] records.', logObject], 'log');\r\n\r\n                            }).fail(function (e) {\r\n                                logObject.status = false;\r\n\r\n                                $log.log('Truncating old [heartbeat] records. (failed)', logObject);\r\n\r\n                                throw e;\r\n                            });\r\n\r\n                    } else {\r\n                        // Giving the cache database a moment to set up.\r\n                        setTimeout(wait, 500);\r\n                    }\r\n                })();\r\n\r\n            }, intervalTime, 0, false);\r\n        })();\r\n\r\n        // add heartBeatMonitorList array.  Is defined in canDetectHeartBeat function.\r\n        $rootScope.heartBeatMonitorList = [];\r\n\r\n        var envSession = sessionService.envSession();\r\n\r\n        var heartBeatMonitorInterval = 300000; // 5 minutes\r\n        // manage based on battery\r\n        if (envSession.batteryLevel && envSession.batteryLevel <= 30) {\r\n            heartBeatMonitorInterval = heartBeatMonitorInterval * 2;\r\n        }\r\n\r\n        // starts up heartBeatMonitor immediately.\r\n        $interval(function () {\r\n\r\n            // for each item in heartBeatMonitorList, verify a connection is possible.\r\n            _.each($rootScope.heartBeatMonitorList, function (item) {\r\n\r\n                var result = true;\r\n\r\n                // attempt to call the heartbeat WebApi.\r\n                $http.get(item.url, { withCredentials: true })\r\n                    .success(function (data) {\r\n                        result = true;\r\n                        item.detected = result;\r\n                        // record results to the log and include data if available.\r\n                        recordHeartBeatResult(item.id, result, data);\r\n                    })\r\n                    .error(function () {\r\n                        result = false;\r\n                        item.detected = result;\r\n\r\n                        // record results to the log\r\n                        recordHeartBeatResult(item.id, result);\r\n\r\n                        // add to codeBlueList to be processed by the codeBlueMonitor process if not already added.\r\n                        addToCodeBlueList(item);\r\n\r\n                    });\r\n\r\n            });\r\n\r\n        }, heartBeatMonitorInterval, 0, false); // Starting at 1 minute but this might be adjusted.\r\n\r\n        var recordHeartBeatResult = function (webApiName, result, data) {\r\n\r\n            var datetime = $filter('date')(new Date().getTime(), 'short');\r\n\r\n            var msg = 'The heartbeat result for \\'' + webApiName + '\\' is: [ ' + result + ' ] at ' + datetime;\r\n\r\n            var logObject = utility.getLogObject('HeartBeat', 'Mashup.UI.Core', 'detectService',\r\n                'recordHeartBeatResult', result, sessionService);\r\n            if (result) {\r\n                logObject.msg = msg;\r\n                console.info(angular.fromJson(logObject));\r\n            } else {\r\n                logObject.subject = 'HeartBeatFail';\r\n                $log.error('HeartBeatFail: ' + msg, logObject);\r\n            }\r\n        };\r\n\r\n        var addToCodeBlueList = function (item) {\r\n            if (!_.where($rootScope.codeBlueList, { 'id': item.id }).length) {\r\n\r\n                $rootScope.codeBlueList.push(item);\r\n\r\n                if (!codeBlueMonitor) {\r\n\r\n                    var logObject = utility.getLogObject('StartCodeBlueMonitor', 'Mashup.UI.Core',\r\n                        'detectService', 'addToCodeBlueList', 'Starting', sessionService);\r\n                    $log.info('Starting up code Blue monitor from heartbeat monitor.', logObject);\r\n                    startCodeBlueMonitor();\r\n                }\r\n            }\r\n        };\r\n\r\n        // add codeBlueList\r\n        $rootScope.codeBlueList = [];\r\n\r\n        // variable holding the promise from the $interval.  This is used to stop the codeBlueMonitor once all\r\n        // connections are detected.\r\n        var codeBlueMonitor;\r\n\r\n        // function to check for a pulse for codeBlue list. (every 5 seconds)\r\n        var startCodeBlueMonitor = function () {\r\n\r\n            //var codeBlueMonitorInterval = envSession.envSession();\r\n            var codeBlueMonitorInterval = 60000; // 10 seconds\r\n\r\n            // manage based on battery\r\n            if (envSession.batteryLevel && envSession.batteryLevel <= 30) {\r\n                codeBlueMonitorInterval = codeBlueMonitorInterval * 3;\r\n            }\r\n\r\n            codeBlueMonitor = $interval(function () {\r\n\r\n                var datetime = $filter('date')(new Date().getTime(), 'short');\r\n\r\n                if ($rootScope.codeBlueList.length === 0) {\r\n                    // no more items in codeBlueList so stop the codeBlueMonitor\r\n                    $interval.cancel(codeBlueMonitor);\r\n                    // set the promise to false so it can be evaluated later to determin if it is running.\r\n                    codeBlueMonitor = false;\r\n\r\n                    var logObject = utility.getLogObject('CodeBlueMonitor', 'Mashup.UI.Core',\r\n                        'detectService', 'startCodeBlueMonitor', 'ended', sessionService);\r\n                    $log.info('codeBlueMonitor ended ' + datetime, logObject);\r\n\r\n                } else {\r\n                    // Process each item in the codeBlueList\r\n                    _.each($rootScope.codeBlueList, function (item) {\r\n\r\n                        var result = true;\r\n\r\n                        $http.get(item.url, { withCredentials: true })\r\n                            .success(function (data) {\r\n                                result = true;\r\n                                item.detected = result;\r\n                                // record results to the log and include data if available.\r\n                                recordCodeBlueResult(item.id, result, data);\r\n                                // remove item from list\r\n                                $rootScope.codeBlueList = _.filter($rootScope.codeBlueList,\r\n                                    function (x) { return x.id !== item.id; });\r\n                            })\r\n                            .error(function () {\r\n                                result = false;\r\n                                item.detected = result;\r\n                                // record results to the log\r\n                                recordCodeBlueResult(item.id, result);\r\n                            });\r\n\r\n                    });\r\n                }\r\n\r\n            }, codeBlueMonitorInterval, 0, false); // runs ever 10 seconds when running.\r\n        };\r\n\r\n        var recordCodeBlueResult = function (webApiName, result, data) {\r\n            var datetime = $filter('date')(new Date().getTime(), 'short');\r\n\r\n            var msg = 'The code Blue result for ' + webApiName + ' is: [ ' + result + ' ] at ' + datetime;\r\n\r\n            var logObject = utility.getLogObject('CodeBlueMonitor', 'Mashup.UI.Core',\r\n                'detectService', 'recordCodeBlueResult', result, sessionService);\r\n            logObject.webApiName = webApiName;\r\n\r\n            if (result) {\r\n                $log.info(msg, logObject);\r\n            } else {\r\n                $log.error(msg, logObject);\r\n\r\n            }\r\n\r\n        };\r\n\r\n        // Used to let the calling application know what results we currently have.\r\n        // No connectivity attempt is made here.\r\n        var canDetectHeartBeat = function (heartBeatUrl, webApiName) {\r\n\r\n            // if no heartBeatUrl provided then short curcuit this method \r\n            // and return true allowing the webapi call to continue.\r\n            if (!heartBeatUrl) {\r\n                return true;\r\n            }\r\n\r\n            try {\r\n\r\n                var record = _.where($rootScope.heartBeatMonitorList, { 'id': webApiName });\r\n\r\n                if (record.length === 0) {\r\n\r\n                    // No failure is detected so we assume a connection is possible.\r\n                    // If the client fails to connect then we'll add this to the codeBlue list.\r\n                    var newItem = { id: webApiName, url: heartBeatUrl, detected: true };\r\n                    $rootScope.heartBeatMonitorList.push(newItem);\r\n\r\n                    return true;\r\n                } else {\r\n                    // an item was found so returning the last known good information on this item.\r\n                    return record[0].detected;\r\n                }\r\n\r\n            } catch (e) {\r\n\r\n                var logObject = utility.getLogObject('CodeBlueMonitor', 'Mashup.UI.Core',\r\n                    'detectService', 'canDetectHeartBeat', 'Error', sessionService);\r\n                logObject.webApiName = webApiName;\r\n                logObject.heartBeatUrl = heartBeatUrl;\r\n                logObject.error = e;\r\n\r\n                $log.error('detectService.canDetectHeartBeat: ' + e, logObject);\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        // Determine congestion and if a threshold is met to allow connectivity.\r\n        // - This is determined by the user call passing in threshold requiements (not sure what that is yet)\r\n        // - Also included in the calculation is the devices general performance information\r\n        // - - If the machine always performs slowly then consider that the normal.\r\n\r\n        return {\r\n\r\n            // Detects whether or not a connection has failed the last time connected to.\r\n            detect: function (heartBeatUrl, webApiName) {\r\n                return canDetectHeartBeat(heartBeatUrl, webApiName);\r\n            },\r\n\r\n            // A method to tell the detectService an attempt has failed.\r\n            failed: function (heartBeatUrl, webApiName) {\r\n                // update the codeRed list.\r\n\r\n                var logObject = utility.getLogObject('CodeBlueMonitor', 'Mashup.UI.Core',\r\n                    'detectService', 'detectService.failed', false, sessionService);\r\n                logObject.webApiName = webApiName;\r\n                logObject.heartBeatUrl = heartBeatUrl;\r\n\r\n                $log.warn('detectService.failed: A call to Web Api: ' + webApiName + ' failed', logObject);\r\n\r\n                // if not already added to codeBlueList then add.\r\n                if (!_.where($rootScope.codeBlueList, { 'id': webApiName }).length) {\r\n                    var newItem = { id: webApiName, url: heartBeatUrl, detected: false };\r\n                    $rootScope.codeBlueList.push(newItem);\r\n                }\r\n\r\n                // start up the codeBlueMonitor\r\n                if (!codeBlueMonitor) {\r\n                    // $log.detectService(\"Starting up code Blue monitor from failed method call.\");\r\n                    startCodeBlueMonitor();\r\n                }\r\n\r\n                // TODO: add a method to get the current state of apps for display to the user or admin.\r\n\r\n            }\r\n        };\r\n    }]);\n\r\n/*global mashupApp:false */\r\n/*global ydn:false */\r\n\r\n// I read about this in aPress's Pro AngularJS by Adam Freeman.\r\n// I copied this implementation from Vinny Linck's article 'AngularJS: How to override $log implementation\r\n// http://vinnylinck.tumblr.com/post/58833687265/angularjs-how-to-override-log-implementation\r\n// Obviously I've made many customizations but wanted to give credit to where my work began.\r\n\r\n// All logs are saved locally in the indexeddb database 'logServiceDB'.\r\n// Because this log can potentially consume a lot of space we will limited it.\r\n// We can limit the log based on duration, size, and type of machine. IE: desktop vs mobile device.\r\n\r\n// Future TODO: Request the log via SignalR or some other subscrib method.  Not polling.\r\n\r\nmashupApp.config(['$provide', function ($provide) {\r\n    $provide.decorator('$log', ['$delegate', 'logService', function ($delegate, logService) {\r\n        return logService($delegate);\r\n    }]);\r\n}]);\r\n\r\nmashupApp.factory('logService', ['$filter', 'sessionService', 'utility',\r\n    function ($filter, sessionService, utility) {\r\n        'use strict';\r\n\r\n        return function ($delegate) {\r\n\r\n            // Each log event will be interrogated and check the subject property.  \r\n            // If the subject matches an event we are listening for then we will route it.\r\n\r\n            var CONST_CUST_PARMS = 1;\r\n            var CONST_STANDARD_LOGGING_PARM = 0;\r\n\r\n            var schema = {\r\n                stores: [{\r\n                    name: 'log',\r\n                    keyPath: 'logId',\r\n                    autoIncrement: false,\r\n                },\r\n                {\r\n                    name: 'heartbeat',\r\n                    keyPath: 'logId',\r\n                    autoIncrement: false\r\n                }]\r\n            };\r\n\r\n            var logDb = new ydn.db.Storage('logServiceDB', schema);\r\n\r\n            var logDbReady = false;\r\n\r\n            logDb.onReady(function () {\r\n                logDbReady = true;\r\n                console.log('logServiceDB is ready. [logService]');\r\n            });\r\n            logDb.addEventListener('error', function (event) {\r\n                var e = event.getError();\r\n                console.log('connection failed with ' + e.name);\r\n                // TODO: attempt WebApi call to let someone know the log is failing for this user.\r\n            });\r\n\r\n            // adding more information to the logging object.\r\n            var buildLogObject = function (args, logType) {\r\n                // args[1] is the result of a user passing extra data, as a second parameter, into the $log function.\r\n                // We are adding all these properties to args[0] so that we can save a flat record to the database.\r\n                // This will make interrogating the data much simpler in the future.\r\n                // If an extra parameter was never passed then nothing will happen.\r\n\r\n                var longDateTime = new Date().getTime();\r\n                // To decouple this module so it can be a drop in module the utility module needed removed from DI.\r\n                // Implementing the localMilToUtcMil directly instead of using utility.localMilToUtcMil(longDateTime)\r\n\r\n                var longDateTimeUtc = utility.localMilToUtcMil(longDateTime);\r\n                var dateTime = $filter('date')(longDateTime, 'short');\r\n                var dateTimeUtc = $filter('date')(longDateTimeUtc, 'short');\r\n\r\n                var logServiceObj = {\r\n                    msg: args[CONST_STANDARD_LOGGING_PARM],\r\n                    logId: longDateTimeUtc,\r\n                    dateTimeLocal: dateTime,\r\n                    dateTimeUtc: dateTimeUtc,\r\n                    logType: logType,\r\n                    transmitted: false\r\n                };\r\n\r\n                // Taking all the values added to args[0] and adding to args[1].\r\n                if (args.length > 1) {\r\n                    for (var name in args[CONST_CUST_PARMS]) {\r\n                        if (args[CONST_CUST_PARMS].hasOwnProperty(name)) {\r\n                            logServiceObj[name] = args[CONST_CUST_PARMS][name];\r\n                        }\r\n                    }\r\n                }\r\n                return logServiceObj;\r\n            };\r\n\r\n            // add additional logging\r\n            var additionalProcessing = function (args, logType) {\r\n\r\n                // wait until logDbReady is ready. IE: true\r\n                (function wait() {\r\n                    if (logDbReady) {\r\n\r\n                        if (angular.isString(args[CONST_STANDARD_LOGGING_PARM])) {\r\n\r\n                            var logServiceObj = buildLogObject(args, logType);\r\n\r\n                            var subject = logServiceObj.subject;\r\n\r\n                            switch (subject) {\r\n\r\n                                case 'Perf':\r\n                                    {\r\n\r\n                                        break;\r\n                                    }\r\n                                case 'HeartBeatFail':\r\n                                case 'CodeBlueMonitor':\r\n                                    {\r\n                                        logDb.put({ name: 'heartbeat' }, logServiceObj);\r\n                                        break;\r\n                                    }\r\n                                case 'Debug':\r\n                                    {\r\n                                        // This is a space for doing anything you need to do with debug data.\r\n                                        // This can be saved to a separate IndexedDB database or table.\r\n                                        // This can be sent to a WebApi or file.\r\n                                        // Using the 'subject' property you can add any custom behavior you need.\r\n                                        break;\r\n                                    }\r\n                                case 'Error':\r\n                                    {\r\n                                        // Do something.\r\n                                        break;\r\n                                    }\r\n                            }\r\n\r\n                            logDb.put({ name: 'log' }, logServiceObj);\r\n                        }\r\n                    } else {\r\n                        // Giving the cache database a moment to set up.\r\n                        setTimeout(wait, 500);\r\n                    }\r\n                })();\r\n            };\r\n\r\n            // Manage the log size.\r\n            (function () {\r\n\r\n                // TODO: Consider altering the interval based on the power of the device, batter power, network speed.\r\n                var intervalTime = null;\r\n                var logDuration = null;\r\n\r\n                var envSession = sessionService.envSession();\r\n\r\n                // manage based on deviceType\r\n                if (envSession.deviceType === 'desktop') {\r\n                    intervalTime = 7200000;// check every 2 hours\r\n                    logDuration = 604800000; // 1 week is 604800000\r\n                } else {\r\n                    intervalTime = 1800000;// check every 30 minutes\r\n                    logDuration = 172800000; // 2 days is 172800000\r\n                }\r\n                // manage based on battery\r\n                if (envSession.batteryLevel && envSession.batteryLevel <= 30) {\r\n                    intervalTime = intervalTime * 4;\r\n                    logDuration = logDuration * 4;\r\n                }\r\n\r\n                setInterval(function () {\r\n\r\n                    // wait until logDbReady is ready. IE: true\r\n                    (function wait() {\r\n                        if (logDbReady) {\r\n\r\n                            // delete all records older than 1 week.\r\n                            var indexLongDateUtc = utility.localMilToUtcMil(new Date().getTime()) - logDuration;// - 7;\r\n\r\n                            // TODO: figure out how to add ydn to angular modules to avoid implicit declaration.\r\n                            var keyRange = ydn.db.KeyRange.upperBound(indexLongDateUtc, true);\r\n\r\n                            var logObject = utility.getLogObject('logManagement:Truncate', 'Mashup.UI.Core',\r\n                                'logService', 'anonymous:setInterval', null, sessionService);\r\n                            // Truncate all logs older than a week old.\r\n                            logDb.remove('log', keyRange)\r\n                                .done(function (count) {\r\n                                    logObject.status = true;\r\n                                    logObject.count = count;\r\n\r\n                                    additionalProcessing(['Truncating old [log] records.', logObject], 'log');\r\n                                    console.log(['Truncating old [log] records.', logObject]);\r\n\r\n                                }).fail(function (e) {\r\n                                    logObject.status = false;\r\n\r\n                                    additionalProcessing(['Truncating old [log] records. (failed)', logObject], 'log');\r\n                                    console.log(['Truncating old [log] records.', logObject]);\r\n\r\n                                    throw e;\r\n                                });\r\n\r\n                        } else {\r\n                            // Giving the cache database a moment to set up.\r\n                            setTimeout(wait, 500);\r\n                        }\r\n                    })();\r\n\r\n                }, intervalTime, 0, false);\r\n            })();\r\n\r\n            return {\r\n                // The extra try/catch statements might seem unnecessary and they might be.  The goal\r\n                // is to keep the log service from causing the application to break should anything go wrong.\r\n                log: function () {\r\n                    $delegate.log(arguments[CONST_STANDARD_LOGGING_PARM]);\r\n                    try {\r\n                        additionalProcessing(arguments, 'log');\r\n                    } catch (e) {\r\n                    }\r\n                },\r\n\r\n                info: function () {\r\n                    $delegate.info(arguments[CONST_STANDARD_LOGGING_PARM]);\r\n                    try {\r\n                        additionalProcessing(arguments, 'info');\r\n                    } catch (e) {\r\n                    }\r\n                },\r\n\r\n                error: function () {\r\n                    $delegate.error(arguments[CONST_STANDARD_LOGGING_PARM]);\r\n                    try {\r\n                        additionalProcessing(arguments, 'error');\r\n                    } catch (e) {\r\n                    }\r\n                },\r\n\r\n                warn: function () {\r\n                    $delegate.warn(arguments[CONST_STANDARD_LOGGING_PARM]);\r\n                    try {\r\n                        additionalProcessing(arguments, 'warn');\r\n                    } catch (e) {\r\n                    }\r\n                }\r\n            };\r\n        };\r\n    }]);\n\r\n// This module holds the most common information other application components might need.\r\n// The reason this module is vauge is to reduce the number of services injected into modules.\r\n\r\n// Included in this module:\r\n// - User information\r\n// - App, Web Api, and Database environments\r\n\r\n/*global mashupApp:false */\r\n/*jshint maxcomplexity:13 */  // This is to address the complexity of the if statements below.\r\n\r\nmashupApp.service('sessionService', function () {\r\n    'use strict';\r\n\r\n    var envSession = {};\r\n\r\n    // Get the OS and general environment string.\r\n    (function () {\r\n        // This piece of code is credited to this page.\r\n        // http://www.javascripter.net/faq/operatin.htm\r\n\r\n        // This script sets OSName variable as follows:\r\n        // 'Windows'    for all versions of Windows\r\n        // 'MacOS'      for all versions of Macintosh OS\r\n        // 'Linux'      for all versions of Linux\r\n        // 'UNIX'       for all other UNIX flavors \r\n        // 'Unknown OS' indicates failure to detect the OS\r\n\r\n        var OSName = 'Unknown OS';\r\n        if (navigator.appVersion.indexOf('Win') !== -1) { OSName = 'Windows'; }\r\n        if (navigator.appVersion.indexOf('Mac') !== -1) { OSName = 'MacOS'; }\r\n        if (navigator.appVersion.indexOf('X11') !== -1) { OSName = 'UNIX'; }\r\n        if (navigator.appVersion.indexOf('Linux') !== -1) { OSName = 'Linux'; }\r\n\r\n        envSession.osName = OSName;\r\n        envSession.appVersion = navigator.appVersion;\r\n    })();\r\n\r\n    (function () {\r\n        // This piece of code is credited to this page.\r\n        // http://www.javascripter.net/faq/browsern.htm\r\n        //Browser name = Mozilla Firefox\r\n        //Full version = 32.0\r\n        //Major version = 32\r\n        //navigator.appName = Netscape\r\n        //navigator.userAgent = Mozilla/5.0 (Windows NT 6.3; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0\r\n\r\n        var nAgt = navigator.userAgent;\r\n        var browserName = navigator.appName;\r\n        var fullVersion = '' + parseFloat(navigator.appVersion);\r\n        var majorVersion = parseInt(navigator.appVersion, 10);\r\n        var nameOffset, verOffset, ix;\r\n\r\n        // In Opera, the true version is after 'Opera' or after 'Version'\r\n        if ((verOffset = nAgt.indexOf('Opera')) !== -1) {\r\n            browserName = 'Opera';\r\n            fullVersion = nAgt.substring(verOffset + 6);\r\n            if ((verOffset = nAgt.indexOf('Version')) !== -1)\r\n            { fullVersion = nAgt.substring(verOffset + 8); }\r\n        }\r\n            // In MSIE, the true version is after 'MSIE' in userAgent\r\n        else if ((verOffset = nAgt.indexOf('MSIE')) !== -1) {\r\n            browserName = 'Microsoft Internet Explorer';\r\n            fullVersion = nAgt.substring(verOffset + 5);\r\n        }\r\n            // In Chrome, the true version is after 'Chrome' \r\n        else if ((verOffset = nAgt.indexOf('Chrome')) !== -1) {\r\n            browserName = 'Chrome';\r\n            fullVersion = nAgt.substring(verOffset + 7);\r\n        }\r\n            // In Safari, the true version is after 'Safari' or after 'Version' \r\n        else if ((verOffset = nAgt.indexOf('Safari')) !== -1) {\r\n            browserName = 'Safari';\r\n            fullVersion = nAgt.substring(verOffset + 7);\r\n            if ((verOffset = nAgt.indexOf('Version')) !== -1)\r\n            { fullVersion = nAgt.substring(verOffset + 8); }\r\n        }\r\n            // In Firefox, the true version is after 'Firefox' \r\n        else if ((verOffset = nAgt.indexOf('Firefox')) !== -1) {\r\n            browserName = 'Firefox';\r\n            fullVersion = nAgt.substring(verOffset + 8);\r\n        }\r\n            // In most other browsers, 'name/version' is at the end of userAgent \r\n        else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) <\r\n                  (verOffset = nAgt.lastIndexOf('/'))) {\r\n            browserName = nAgt.substring(nameOffset, verOffset);\r\n            fullVersion = nAgt.substring(verOffset + 1);\r\n            if (browserName.toLowerCase() === browserName.toUpperCase()) {\r\n                browserName = navigator.appName;\r\n            }\r\n        }\r\n        // trim the fullVersion string at semicolon/space if present\r\n        if ((ix = fullVersion.indexOf(';')) !== -1)\r\n        { fullVersion = fullVersion.substring(0, ix); }\r\n        if ((ix = fullVersion.indexOf(' ')) !== -1)\r\n        { fullVersion = fullVersion.substring(0, ix); }\r\n\r\n        majorVersion = parseInt('' + fullVersion, 10);\r\n        if (isNaN(majorVersion)) {\r\n            fullVersion = '' + parseFloat(navigator.appVersion);\r\n            majorVersion = parseInt(navigator.appVersion, 10);\r\n        }\r\n\r\n        envSession.browserName = browserName;\r\n        envSession.fullVersion = fullVersion;\r\n        envSession.majorVersion = majorVersion;\r\n    })();\r\n\r\n    (function () {\r\n        // This piece of code is credited to this page.\r\n        // http://www.abeautifulsite.net/detecting-mobile-devices-with-javascript/\r\n\r\n        // detect desktop versus mobile\r\n        // if mobile then detect which mobileType\r\n        var isMobile = {\r\n            Android: function () {\r\n                return navigator.userAgent.match(/Android/i);\r\n            },\r\n            BlackBerry: function () {\r\n                return navigator.userAgent.match(/BlackBerry/i);\r\n            },\r\n            iOS: function () {\r\n                return navigator.userAgent.match(/iPhone|iPad|iPod/i);\r\n            },\r\n            Opera: function () {\r\n                return navigator.userAgent.match(/Opera Mini/i);\r\n            },\r\n            Windows: function () {\r\n                return navigator.userAgent.match(/IEMobile/i);\r\n            },\r\n            any: function () {\r\n                return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() ||\r\n                    isMobile.Opera() || isMobile.Windows());\r\n            }\r\n        };\r\n\r\n        var mobileType = '';\r\n        // check if mobile or desktop\r\n        if (isMobile.any()) {\r\n            envSession.deviceType = 'mobile';\r\n            if (isMobile.Android()) { mobileType = 'Android'; }\r\n            if (isMobile.BlackBerry()) { mobileType = 'BlackBerry'; }\r\n            if (isMobile.iOS()) { mobileType = 'iPhone|iPad|iPod'; }\r\n            if (isMobile.Opera()) { mobileType = 'Opera Mini'; }\r\n            if (isMobile.Windows()) { mobileType = 'IEMobile'; }\r\n        } else {\r\n            envSession.deviceType = 'desktop';\r\n        }\r\n        envSession.mobileType = mobileType;\r\n\r\n    })();\r\n\r\n    (function () {\r\n        // Retrieve battery information\r\n\r\n        var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery;\r\n\r\n        if (battery) {\r\n            var batteryLevelChanged = function () {\r\n                envSession.batteryLevel = battery.level * 100;\r\n            };\r\n\r\n            battery.addEventListener('levelchange', function (e) {\r\n                console.warn('sessionService: Battery level change: ', battery.level);\r\n                batteryLevelChanged();\r\n            }, false);\r\n\r\n        }\r\n\r\n    })();\r\n\r\n    // The userSession object is used for general logging.  This prevents\r\n    // the log interception from having to know what user and app are invoking \r\n    // the logService.  Each route will set these values.\r\n    var userSessions = {};\r\n\r\n    return {\r\n\r\n        getUserSessions: function () {\r\n\r\n            if (!userSessions.hasOwnProperty('logUserName')) {\r\n                userSessions.logUserName = 'unknown-user';\r\n            }\r\n\r\n            if (!userSessions.hasOwnProperty('logAppName')) {\r\n                userSessions.logAppName = 'unknown-app';\r\n            }\r\n            return userSessions;\r\n        },\r\n\r\n        setUserSession: function (session) {\r\n            userSessions = session; return true;\r\n        },\r\n\r\n        envSession: function () { return envSession; }\r\n\r\n    };\r\n});\r\n\r\n\n\r\n/*global mashupApp:false */\r\n/*jshint -W106 */\r\n\r\n\r\nmashupApp.service('utility', ['utility_UtcDateService', 'utility_LogHelper',\r\n    function (utility_UtcDateService, utility_LogHelper) {\r\n    'use strict';\r\n\r\n    //---------------------------------------------------------------------\r\n    // INSTRUCTIONS for 'utility' usage.\r\n    //---------------------------------------------------------------------\r\n    //---------------------------------------------------------------------\r\n    // Keeps like utility groups together in their own modules then reference \r\n    // them here and use this general utility class throughout the project.\r\n    // This will allow for more modular, testable, code while keeping the \r\n    // number of dependency injected modules to minimum.\r\n    //---------------------------------------------------------------------\r\n    //---------------------------------------------------------------------\r\n\r\n    //---------------------------------------------------------------------\r\n    // Provides access to the utility_UtcDateService functions.\r\n    // For converting to and from local and UTC dates.\r\n    //---------------------------------------------------------------------\r\n    var utcMilToLocalMil = utility_UtcDateService.utcMilToLocalMil;\r\n    var localMilToUtcMil = utility_UtcDateService.localMilToUtcMil;\r\n    var localDateToUtcDate = utility_UtcDateService.localDateToUtcDate;\r\n    var utcDateToLocalDate = utility_UtcDateService.utcDateToLocalDate;\r\n    //---------------------------------------------------------------------\r\n    //---------------------------------------------------------------------\r\n\r\n\r\n    var getLogObject = utility_LogHelper.getLogObject;\r\n\r\n    return {\r\n        //---------------------------------------------------------------------\r\n        // Provides access to the utility_UtcDateService functions.\r\n        // For converting to and from local and UTC dates.\r\n        //---------------------------------------------------------------------\r\n        localDateToUtcDate: localDateToUtcDate,\r\n        utcDateToLocalDate: utcDateToLocalDate,\r\n        localMilToUtcMil: localMilToUtcMil,\r\n        utcMilToLocalMil: utcMilToLocalMil,\r\n        //---------------------------------------------------------------------\r\n        //---------------------------------------------------------------------\r\n\r\n        getLogObject: getLogObject\r\n    };\r\n}]);\r\n\r\n\n\r\n/*global mashupApp:false */\r\n\r\nmashupApp.service('utility_LogHelper', function () {\r\n    'use strict';\r\n    var getLogObject = function (subject, app, mod, func, status, sessionService) {\r\n\r\n        var logObject = {\r\n            subject: subject,\r\n            app: app,\r\n            module: mod,\r\n            func: func,\r\n            status: status\r\n        };\r\n\r\n        try {\r\n            var userSessions = sessionService.getUserSessions();\r\n\r\n            if (!userSessions.hasOwnProperty('logUserName')) {\r\n                logObject.logUserName = 'unknown-user-property';\r\n            } else {\r\n                logObject.logUserName = userSessions.logUserName;\r\n            }\r\n\r\n            if (!userSessions.hasOwnProperty('logAppName')) {\r\n                logObject.logAppName = 'unknown-app-property';\r\n            } else {\r\n                logObject.logAppName = userSessions.logAppName;\r\n            }\r\n            \r\n        }\r\n        catch (e) { }\r\n\r\n        try {\r\n            var envSession = sessionService.envSession();\r\n            logObject.osName = envSession.osName;\r\n            logObject.browser = envSession.browserName + ' ' + envSession.fullVersion;\r\n\r\n            if (envSession.deviceType === 'desktop') {\r\n                logObject.deviceType = envSession.deviceType;\r\n            } else {\r\n                logObject.deviceType = envSession.deviceType + ': ' + envSession.mobileType;\r\n            }\r\n        }\r\n        catch (e) { }\r\n\r\n        return logObject;\r\n\r\n    };\r\n\r\n    return {\r\n\r\n        getLogObject: getLogObject\r\n\r\n    };\r\n\r\n});\n\r\n/*global mashupApp:false */\r\n\r\nmashupApp.service('utility_UtcDateService', function () {\r\n\t'use strict';\r\n\r\n\tvar utcMilToLocalMil = function (milliseconds) {\r\n\t\tvar now = new Date();\r\n\t\treturn new Date().setTime(milliseconds - (now.getTimezoneOffset() * 60000));\r\n\t};\r\n\r\n\tvar localMilToUtcMil = function (milliseconds) {\r\n\t\tvar now = new Date();\r\n\t\treturn new Date().setTime(milliseconds + (now.getTimezoneOffset() * 60000));\r\n\t};\r\n\r\n\tvar localDateToUtcDate = function (localDate) {\r\n\t\treturn new Date(localMilToUtcMil(localDate.getTime()));\r\n\t};\r\n\r\n\tvar utcDateToLocalDate = function (utcDate) {\r\n\t\treturn new Date(utcMilToLocalMil(utcDate.getTime()));\r\n\t};\r\n\t\r\n\t//(function () {\r\n\r\n\t//    var longDateTime = new Date().getTime();\r\n\t//    var longDateTimeUTC = localMilToUtcMil(longDateTime);\r\n\r\n\t//    var newDateLongDateTime = new Date(longDateTime);\r\n\t//    var newDateLongDateTimeUTC = new Date(longDateTimeUTC);\r\n\r\n\t//    var longConvertBackToLocal = utcMilToLocalMil(longDateTimeUTC);\r\n\t//    var newLongConvertBackToLocal = new Date(longConvertBackToLocal);\r\n\r\n\t//    var newUTCDateFromLocal = localDateToUtcDate(newDateLongDateTime);\r\n\t//    var newLocalDateFromUtc = utcDateToLocalDate(newDateLongDateTimeUTC);\r\n\r\n\t//    console.log(\"\");\r\n\t//    console.log(\"Create long date values\");\r\n\t//    console.log(\"newDateLongDateTime: \" + newDateLongDateTime);\r\n\t//    console.log(\"longDateTime: \" + longDateTime);\r\n\r\n\t//    console.log(\"\");\r\n\t//    console.log(\"Create UTC values from long dates created above\");\r\n\t//    console.log(\"newDateLongDateTimeUTC: \" + newDateLongDateTimeUTC);\r\n\t//    console.log(\"longDateTimeUTC: \" + longDateTimeUTC);\r\n\r\n\t//    console.log(\"\");\r\n\t//    console.log(\"Convert UTC back to Local\");\r\n\t//    console.log(\"longConvertBackToLocal: \" + longConvertBackToLocal);\r\n\t//    console.log(\"newLongConvertBackToLocal: \" + newLongConvertBackToLocal);\r\n\r\n\t//    console.log(\"\");\r\n\t//    console.log(\"Convert Local Date to UTC Date\");\r\n\t//    console.log(\"newUTCDateFromLocal: \" + newUTCDateFromLocal);\r\n\r\n\t//    console.log(\"\");\r\n\t//    console.log(\"Convert UTC Date to Local Date\");\r\n\t//    console.log(\"newLocalDateFromUtc: \" + newLocalDateFromUtc);\r\n\r\n\t//})();\r\n\r\n\treturn {\r\n\r\n\t\tlocalDateToUtcDate: localDateToUtcDate,\r\n\r\n\t\tutcDateToLocalDate: utcDateToLocalDate,\r\n\r\n\t\tlocalMilToUtcMil: localMilToUtcMil,\r\n\r\n\t\tutcMilToLocalMil: utcMilToLocalMil\r\n\r\n\t};\r\n\r\n});"],"sourceRoot":"/source/"}