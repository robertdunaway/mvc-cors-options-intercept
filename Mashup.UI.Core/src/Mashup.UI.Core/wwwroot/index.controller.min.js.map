{"version":3,"sources":["index.controller.js"],"names":["mashupApp","controller","$scope","$modal","$log","$http","alertService","open","myModal","templateUrl","backdrop","windowClass","keyboard","resolve","result","then","log","addAlert","add","battery","navigator","webkitBattery","mozBattery","batteryStatusChange","batteryCharging","charging","batteryLevel","level","batteryStatus","phase","$root","$$phase","$apply","addEventListener","e","console","warn"],"mappings":"AAEAA,UAAUC,WAAW,mBAAoB,SAAU,SAAU,OAAQ,QAAS,eAC1E,SAAUC,EAAQC,EAAQC,EAAMC,EAAOC,GACvC,YAIAJ,GAAOK,KAAO,WAEV,GAAIC,GAAUL,EAAOI,MACjBE,YAAa,4BACbC,SAAU,SACVC,YAAa,QACbV,WAAY,iBACZW,UAAU,EAGVC,YAMJL,GAAQM,OAAOC,KAAK,SAAUD,GAC1BV,EAAKY,IAAI,WAAaF,MAK9BZ,EAAOe,SAAW,WACdX,EAAaY,IAAI,eAAgB,iDAQrC,WAEI,GAAIC,GAAUC,UAAUD,SAAWC,UAAUC,eAAiBD,UAAUE,WACpEC,EAAsB,WAEtB,GAAIC,GAAkBL,EAAQM,SAC1BC,EAA+B,IAAhBP,EAAQQ,KAGvBzB,GAAO0B,cADPJ,EACuB,aAAeE,EAAe,IAE9B,YAAcA,EAAe,GAQxD,IAAIG,GAAQ3B,EAAO4B,MAAMC,OACX,YAAVF,GAAgC,YAAVA,GACtB3B,EAAO8B,SAKXb,KAEAI,IAEAJ,EAAQc,iBAAiB,iBAAkB,SAAUC,GACjDC,QAAQC,KAAK,0BAA2BjB,EAAQM,UAChDF,MACD,GACHJ,EAAQc,iBAAiB,cAAe,SAAUC,GAC9CC,QAAQC,KAAK,yBAA0BjB,EAAQQ,OAC/CJ,MACD","file":"index.controller.min.js","sourcesContent":["/*global mashupApp:false */\r\n\r\nmashupApp.controller('indexController', ['$scope', '$modal', '$log', '$http', 'alertService',\r\n    function ($scope, $modal, $log, $http, alertService) {\r\n    'use strict';\r\n    //var x = 3.14;\r\n        \r\n    // Launches the modal dialog for the menu.\r\n    $scope.open = function () {\r\n\r\n        var myModal = $modal.open({\r\n            templateUrl: 'apps/mashup/menu.min.html',\r\n            backdrop: 'statis', // can be true \r\n            windowClass: 'modal',\r\n            controller: 'menuController',\r\n            keyboard: true,\r\n            //backdropClick: true,\r\n\r\n            resolve: {}\r\n\r\n        });\r\n\r\n        // get result here...  This seems like almost an if/else.  The second\r\n        // function only runs when I press the cancel button which fires dismiss.\r\n        myModal.result.then(function (result) {\r\n            $log.log('result: ' + result);\r\n        });\r\n\r\n    };\r\n\r\n    $scope.addAlert = function () {\r\n        alertService.add('alert-danger', '<h4>Success!</h4> This is a success message!');\r\n        // options\r\n        // alert-success\r\n        // alert-warning\r\n        // alert-info\r\n        // alert-danger\r\n    };\r\n\r\n    (function () {\r\n        // Get the battery!\r\n        var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery;\r\n        var batteryStatusChange = function() {\r\n\r\n            var batteryCharging = battery.charging;\r\n            var batteryLevel = battery.level * 100;\r\n\r\n            if (batteryCharging) {\r\n                $scope.batteryStatus = 'Charging: ' + batteryLevel + '%';\r\n            } else {\r\n                $scope.batteryStatus = 'Battery: ' + batteryLevel + '%';\r\n            }\r\n            // TODO: write up this battery function and how $scope.$apply() was useful.\r\n            // Having problems with this apply because the digest cycle is already running.  This happens\r\n            // when using events from the DOM or other 3rd party plugins.\r\n            // I decided to use a type of 'safe' $apply as recommended in the following article.\r\n            // https://coderwall.com/p/ngisma\r\n            // TODO: Move this safe apply to something shared like the utility service.\r\n            var phase = $scope.$root.$$phase;\r\n            if (phase !== '$apply' && phase !== '$digest') {\r\n                $scope.$apply();\r\n            }\r\n        };\r\n\r\n        // If battery object available then set values.\r\n        if (battery) {\r\n\r\n            batteryStatusChange();\r\n\r\n            battery.addEventListener('chargingchange', function (e) {\r\n                console.warn('Battery charge change: ', battery.charging);\r\n                batteryStatusChange();\r\n            }, false);\r\n            battery.addEventListener('levelchange', function (e) {\r\n                console.warn('Battery level change: ', battery.level);\r\n                batteryStatusChange();\r\n            }, false);\r\n        }\r\n    })();\r\n}]);\r\n"],"sourceRoot":"/source/"}