{"version":3,"sources":["apps/mashup/login.controller.js"],"names":["mashupApp","controller","$location","$log","$timeout","$scope","sessionService","cacheService","utility","vm","this","appName","getAppSession","getCache","then","data","appSession","_","isNull","isUndefined","sessions","id","index","findIndex","labelUserName","userName","login","authenticated","updateAppSession","name","updateSessionsUser","logAuthentication","path","session","getUserSessions","setUserSession","sessionAlreadyExists","where","length","buildSessionJSON","push","putCache","keyPath","sessionJSON","utcMills","localMilToUtcMil","Date","getTime","localMills","utcMilToLocalMil","localDate","roles","authTimeUTCMills","authTimelocalMills","authTimelocalDate","sessionLastUsed","isAuthenticated","logObject","getLogObject","log"],"mappings":"AAEAA,UAAUC,WAAW,0BAA2B,YAAa,OAAQ,WAAY,SAC7E,iBAAkB,eAAgB,UAClC,SAAUC,EAAWC,EAAMC,EAAUC,EAAQC,EAAgBC,EAAcC,GACvE,YAEA,IAAIC,GAAKC,IACTD,GAAGE,QAAU,aAEb,IAAIC,GAAgB,WAChB,MAAOL,GAAaM,SAAS,kBAGjCD,KAAgBE,KAAK,SAAUC,GAC3BN,EAAGO,WAAaD,EAAK,IAEC,YAAlBN,EAAGO,YAA8C,MAAlBP,EAAGO,YAClCC,EAAEC,OAAOT,EAAGO,aAAeC,EAAEE,YAAYV,EAAGO,eAC5CP,EAAGO,YAAeI,aAClBX,EAAGO,WAAWK,GAAK,iBAGvB,IAAIC,GAAQL,EAAEM,UAAUd,EAAGO,WAAWI,UAAYT,QAAWF,EAAGE,SAC5DW,GAAQ,KACRb,EAAGe,cAAgBf,EAAGO,WAAWI,SAASE,GAAOG,YAKzDhB,EAAGiB,MAAQ,WAGP,GAAIC,IAAgB,CAEhBA,IAEAC,EAAiBnB,EAAGoB,KAAMpB,EAAGE,SAE7BmB,EAAmBrB,EAAGoB,KAAMpB,EAAGE,SAE/BoB,EAAkBtB,EAAGoB,KAAMpB,EAAGE,QAASgB,GAEvCzB,EAAU8B,KAAK,MAIfD,EAAkBtB,EAAGoB,KAAMpB,EAAGE,QAASgB,GAK/C,IAAIG,GAAqB,SAAUL,EAAUd,GAEzC,GAAIsB,GAAU3B,EAAe4B,iBAC7BD,GAAQR,SAAWA,EACnBQ,EAAQtB,QAAUA,EAElBL,EAAe6B,eAAeF,IAI9BL,EAAmB,SAAUH,EAAUd,GAEvC,GAAIyB,EACJA,KAAyBnB,EAAEoB,MAAM5B,EAAGO,WAAWI,UAAYT,QAAWA,IAAW2B,MAEjF,IAAIL,GAAUM,EAAiBd,EAAUd,EAEzC,IAAIyB,EAAsB,CAGtB,GAAId,GAAQL,EAAEM,UAAUd,EAAGO,WAAWI,UAAYT,QAAWA,GAC7DF,GAAGO,WAAWI,SAASE,GAASW,MAKhCxB,GAAGO,WAAWI,SAASoB,KAAKP,EAEhC1B,GAAakC,SAAS,kBAAoBZ,KAAM,iBAAkBa,QAAS,MAAQjC,EAAGO,aAGtFuB,EAAmB,SAAUd,EAAUd,GACvC,GAAIgC,MAEAC,EAAWpC,EAAQqC,kBAAiB,GAAIC,OAAOC,WAC/CC,EAAaxC,EAAQyC,iBAAiBL,GACtCM,EAAYJ,KAAKE,GAGjBG,GAAS,aAAc,aAAc,gBAYzC,OAVAR,GAAYhC,QAAUA,EACtBgC,EAAYlB,SAAWA,EACvBkB,EAAYQ,MAAQA,EACpBR,EAAYS,iBAAmBR,EAC/BD,EAAYU,mBAAqBL,EACjCL,EAAYW,kBAAoBJ,EAEhCP,EAAYY,gBAAkBX,EAC9BD,EAAYa,iBAAkB,EAEvBb,GAGPZ,EAAoB,SAAUN,EAAUd,EAASgB,GAIjD,GAAI8B,GAAYjD,EAAQkD,aAAa,QAAS/C,EAAS,yBAA0B,QAC7EgB,EAAerB,EAEnBmD,GAAUhC,SAAWA,EACrBgC,EAAU9C,QAAUA,EACpB8C,EAAU9B,cAAgBA,EAC1BxB,EAAKwD,IAAI,0BAA4BlC,EAAW,eAAiBd,EAAU,KAAM8C","file":"apps/mashup/login.controller.min.js","sourcesContent":["/*global mashupApp:false, _:false */\r\n\r\nmashupApp.controller('mashup.LoginController', ['$location', '$log', '$timeout', '$scope',\r\n    'sessionService', 'cacheService', 'utility',\r\n    function ($location, $log, $timeout, $scope, sessionService, cacheService, utility) {\r\n        'use strict';\r\n\r\n        var vm = this;\r\n        vm.appName = 'coreSession';\r\n\r\n        var getAppSession = function () {\r\n            return cacheService.getCache('mashupSessions');\r\n        };\r\n\r\n        getAppSession().then(function (data) {\r\n            vm.appSession = data[0];\r\n            // TODO: Improve checking for no session in cache. Maybe move this to the getCache() function.\r\n            if (vm.appSession === 'NoCache' || vm.appSession === 'N' ||\r\n                _.isNull(vm.appSession) || _.isUndefined(vm.appSession)) {\r\n                vm.appSession = { sessions: [] };\r\n                vm.appSession.id = 'mashupSessions';\r\n            }\r\n\r\n            var index = _.findIndex(vm.appSession.sessions, { 'appName': vm.appName });\r\n            if (index > -1) {\r\n                vm.labelUserName = vm.appSession.sessions[index].userName;\r\n            }\r\n\r\n        });\r\n\r\n        vm.login = function () {\r\n\r\n            // SIMULARED AUTHENTICATION: REPLACE WITH ACTUAL AUTH CODE HERE.\r\n            var authenticated = true;\r\n\r\n            if (authenticated) {\r\n                // update the appSession in indexedDB\r\n                updateAppSession(vm.name, vm.appName);\r\n                // update the sessionService used by logging\r\n                updateSessionsUser(vm.name, vm.appName);\r\n                // log authentication results\r\n                logAuthentication(vm.name, vm.appName, authenticated);\r\n\r\n                $location.path('/');\r\n\r\n            }\r\n            else {\r\n                logAuthentication(vm.name, vm.appName, authenticated);\r\n            }\r\n\r\n        };\r\n\r\n        var updateSessionsUser = function (userName, appName) {\r\n            // THIS INFORMATION IS USED BY SERVICES THAT NEED TO KNOW THE USER AND APP.\r\n            var session = sessionService.getUserSessions();\r\n            session.userName = userName;\r\n            session.appName = appName;\r\n\r\n            sessionService.setUserSession(session);\r\n\r\n        };\r\n\r\n        var updateAppSession = function (userName, appName) {\r\n            // ASSUMING YOU'LL HAVE YOUR OWN SESSION OBJECT, REPLACE THESE PARAMETERS WITH YOUR AUTH OBJECT.\r\n            var sessionAlreadyExists;\r\n            sessionAlreadyExists = !!_.where(vm.appSession.sessions, { 'appName': appName }).length;\r\n\r\n            var session = buildSessionJSON(userName, appName);\r\n\r\n            if (sessionAlreadyExists) {\r\n                // If YES then get the index of the session and update it.\r\n                // getting index of the session\r\n                var index = _.findIndex(vm.appSession.sessions, { 'appName': appName });\r\n                vm.appSession.sessions[index] = session;\r\n            }\r\n            else {\r\n                // If NO then push object onto the session.\r\n                // ADD SESSION\r\n                vm.appSession.sessions.push(session);\r\n            }\r\n            cacheService.putCache('mashupSessions', { name: 'mashupSessions', keyPath: 'id' }, vm.appSession);\r\n        };\r\n\r\n        var buildSessionJSON = function (userName, appName) {\r\n            var sessionJSON = {};\r\n\r\n            var utcMills = utility.localMilToUtcMil(new Date().getTime());\r\n            var localMills = utility.utcMilToLocalMil(utcMills);\r\n            var localDate = Date(localMills);\r\n\r\n            // TODO: REPLACE stub roles array\r\n            var roles = ['DomainUser', 'MashupUser', 'Administrator'];\r\n\r\n            sessionJSON.appName = appName;\r\n            sessionJSON.userName = userName;\r\n            sessionJSON.roles = roles;\r\n            sessionJSON.authTimeUTCMills = utcMills;\r\n            sessionJSON.authTimelocalMills = localMills;\r\n            sessionJSON.authTimelocalDate = localDate;\r\n            // Below helps prevent the system from re-authenticating a session that is actively being used.\r\n            sessionJSON.sessionLastUsed = utcMills;\r\n            sessionJSON.isAuthenticated = true;\r\n\r\n            return sessionJSON;\r\n        };\r\n\r\n        var logAuthentication = function (userName, appName, authenticated) {\r\n            // -------------------------------------------------------------------\r\n            // Instrumentation\r\n            // -------------------------------------------------------------------\r\n            var logObject = utility.getLogObject('Instr', appName, 'mashup.LoginController', 'login',\r\n                authenticated, sessionService);\r\n            // Additional or custom properties for logging.\r\n            logObject.userName = userName;\r\n            logObject.appName = appName;\r\n            logObject.authenticated = authenticated;\r\n            $log.log('Authentication [ User: ' + userName + ' ] on [App: ' + appName + ' ]', logObject);\r\n            // -------------------------------------------------------------------\r\n            // -------------------------------------------------------------------\r\n        };\r\n\r\n    }]);"],"sourceRoot":"/source/"}